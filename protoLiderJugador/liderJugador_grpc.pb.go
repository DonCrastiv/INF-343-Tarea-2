// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ProtoLiderJugadores

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JugadorClient is the client API for Jugador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JugadorClient interface {
	SolicitarUnirse(ctx context.Context, in *Unirse, opts ...grpc.CallOption) (*RespuestaUnirse, error)
	EnviarJugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*RespuestaJugada, error)
	SolicitarVerPozo(ctx context.Context, in *VerPozo, opts ...grpc.CallOption) (*RespuestaVerPozo, error)
}

type jugadorClient struct {
	cc grpc.ClientConnInterface
}

func NewJugadorClient(cc grpc.ClientConnInterface) JugadorClient {
	return &jugadorClient{cc}
}

func (c *jugadorClient) SolicitarUnirse(ctx context.Context, in *Unirse, opts ...grpc.CallOption) (*RespuestaUnirse, error) {
	out := new(RespuestaUnirse)
	err := c.cc.Invoke(ctx, "/grpc.Jugador/SolicitarUnirse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jugadorClient) EnviarJugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*RespuestaJugada, error) {
	out := new(RespuestaJugada)
	err := c.cc.Invoke(ctx, "/grpc.Jugador/EnviarJugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jugadorClient) SolicitarVerPozo(ctx context.Context, in *VerPozo, opts ...grpc.CallOption) (*RespuestaVerPozo, error) {
	out := new(RespuestaVerPozo)
	err := c.cc.Invoke(ctx, "/grpc.Jugador/SolicitarVerPozo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JugadorServer is the server API for Jugador service.
// All implementations must embed UnimplementedJugadorServer
// for forward compatibility
type JugadorServer interface {
	SolicitarUnirse(context.Context, *Unirse) (*RespuestaUnirse, error)
	EnviarJugada(context.Context, *Jugada) (*RespuestaJugada, error)
	SolicitarVerPozo(context.Context, *VerPozo) (*RespuestaVerPozo, error)
	mustEmbedUnimplementedJugadorServer()
}

// UnimplementedJugadorServer must be embedded to have forward compatible implementations.
type UnimplementedJugadorServer struct {
}

func (UnimplementedJugadorServer) SolicitarUnirse(context.Context, *Unirse) (*RespuestaUnirse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarUnirse not implemented")
}
func (UnimplementedJugadorServer) EnviarJugada(context.Context, *Jugada) (*RespuestaJugada, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarJugada not implemented")
}
func (UnimplementedJugadorServer) SolicitarVerPozo(context.Context, *VerPozo) (*RespuestaVerPozo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarVerPozo not implemented")
}
func (UnimplementedJugadorServer) mustEmbedUnimplementedJugadorServer() {}

// UnsafeJugadorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JugadorServer will
// result in compilation errors.
type UnsafeJugadorServer interface {
	mustEmbedUnimplementedJugadorServer()
}

func RegisterJugadorServer(s grpc.ServiceRegistrar, srv JugadorServer) {
	s.RegisterService(&Jugador_ServiceDesc, srv)
}

func _Jugador_SolicitarUnirse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unirse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadorServer).SolicitarUnirse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Jugador/SolicitarUnirse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadorServer).SolicitarUnirse(ctx, req.(*Unirse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jugador_EnviarJugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadorServer).EnviarJugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Jugador/EnviarJugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadorServer).EnviarJugada(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jugador_SolicitarVerPozo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerPozo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadorServer).SolicitarVerPozo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Jugador/SolicitarVerPozo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadorServer).SolicitarVerPozo(ctx, req.(*VerPozo))
	}
	return interceptor(ctx, in, info, handler)
}

// Jugador_ServiceDesc is the grpc.ServiceDesc for Jugador service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jugador_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Jugador",
	HandlerType: (*JugadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitarUnirse",
			Handler:    _Jugador_SolicitarUnirse_Handler,
		},
		{
			MethodName: "EnviarJugada",
			Handler:    _Jugador_EnviarJugada_Handler,
		},
		{
			MethodName: "SolicitarVerPozo",
			Handler:    _Jugador_SolicitarVerPozo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liderJugador.proto",
}
